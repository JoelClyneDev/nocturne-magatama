[{"G:\\Dev\\nocturne-magatama\\nocturne-magatama\\client\\src\\index.js":"1","G:\\Dev\\nocturne-magatama\\nocturne-magatama\\client\\src\\App.js":"2","G:\\Dev\\nocturne-magatama\\nocturne-magatama\\client\\src\\serviceWorker.js":"3","G:\\Dev\\nocturne-magatama\\nocturne-magatama\\client\\src\\Magatama.js":"4","G:\\Dev\\nocturne-magatama\\nocturne-magatama\\client\\src\\skill.js":"5"},{"size":510,"mtime":1610224105309,"results":"6","hashOfConfig":"7"},{"size":6484,"mtime":1610993464699,"results":"8","hashOfConfig":"7"},{"size":5915,"mtime":1610223025242,"results":"9","hashOfConfig":"7"},{"size":5361,"mtime":1610745566121,"results":"10","hashOfConfig":"7"},{"size":2242,"mtime":1610223094124,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"xa4w2y",{"filePath":"15","messages":"16","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"G:\\Dev\\nocturne-magatama\\nocturne-magatama\\client\\src\\index.js",[],["25","26"],"G:\\Dev\\nocturne-magatama\\nocturne-magatama\\client\\src\\App.js",["27","28","29","30","31"],"import React, {useState, useEffect } from 'react';\nimport './App.css';\nimport {generateSkill, parseSkillObjectArray} from './skill';\nimport makeMagatama from './Magatama';\nimport { useCallback } from 'react';\nimport { renderToString } from 'react-dom/server';\nimport ReactHtmlParser from 'react-html-parser';\nimport bg from './images/smt_bg3.png';\nimport './fonts/timesnewarial.ttf';\nimport './fonts/KarlaRegular.ttf';\nimport logo from './images/smt3LogoV2.png';\nimport { render } from 'react-dom';\n//import magatamaList from './generateMagatamas'\n\n\nfunction App() {\n\n    /*\n    **uses the elements of the database JSON to convert them into React HTML\n    */\n    function createMagatamaCode(name, element, wild_effects, st, ma, vt, ag, lu, reflect, absorb, negate, weak, resist, skills){\n        console.log(skills)\n        const skillArray = []\n\n        //For of the magatama's skills, create an array of that skill's elements, and put that array into the skillArray const\n        skills.forEach(element => skillArray.push(generateSkill(element.skill_name, element.cost, element.effect, element.level)))\n\n        //Use the skillArray to create the react html code for it\n        var finalSkills = parseSkillObjectArray(skillArray)\n        \n        //Generates the react html code for a magatama using its attributes and also the string array of skills\n        var tempMagatama7 = makeMagatama(name, element, wild_effects, st, ma, vt, ag, lu, reflect, absorb, negate, weak, resist, finalSkills)\n\n        return tempMagatama7\n    }\n\n    //the states of the page\n    //actual page is loaded when loading == false\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [data, setData] = useState(null);\n\n\n    /*\n    attemps to make the connection to the server\n    on a successful connection, it changes loading to false and gets data\n    otherwise, it returns an error\n    */\n    const loadData = useCallback(() => {\n        async function makeRequest() {\n            try {\n                setLoading(true);\n                const resp = await fetch('http://localhost:4000/api/Magatamas');\n                //console.log('data set')\n                if (resp.ok){\n                    setData(await resp.json())\n                    console.log('data set')\n                    console.log(data)\n                    \n                    \n                }\n                else {\n                    console.log('data not set')\n                    //console.log(data)\n                    setError(`Error calling API: ${resp.status} ${resp.statusText}`);\n                }\n                \n            } catch (e){\n                setError(`Error making API call: ${e.toString()}`);\n            } finally {\n                setLoading(false)\n            }\n        }\n\n        makeRequest();\n        console.log(data)\n        //the function wont be rerendered unless one these changes\n    }, [setLoading, setData, setError])\n\n    /*\n    **Loads data from server after render of loading page\n    */\n    useEffect(() => {\n        loadData();\n        console.log(data)\n    }, [])\n\n    //  \n\n    \n    //If loading the page resulted in an error, display the error in the browser\n    if (error) {\n    return <p style={{ color: 'red' }}>{error}</p>;\n    }\n    //If the page is still loading, waiting for the response from the server, show that the page is loading\n    if (loading) {\n    return <p>Loading...</p>;\n    }\n\n    //If we're here, then the client has the data from the server\n\n    //The json data from the server\n    var magData = data.data\n    //The react html of the data\n    var tempMagatamaArray = []\n    //For each element in the magData, use its attributes to create its react html and add it to the temp magatama array\n    magData.forEach(element => tempMagatamaArray.push(createMagatamaCode(element.name, element.element, element.wild_effects, element.st, element.ma, element.vt, element.ag, element.lu, element.reflect, element.absorb, element.void, element.weak, element.resist, element.skills)))\n    \n\n    /*For doing stuff to the toggle display reference (In this case the paragraph)\n    Have to say current to access the one I want */\n    function addMagatamaArrayToHTML(magatamaArray){\n        var compiledMagatamas = \"\"\n        magatamaArray.forEach(element => compiledMagatamas = compiledMagatamas + renderToString(element))\n        return compiledMagatamas\n    }\n    \n    //the react code for all of magatamas\n    const finalMagatamas = ReactHtmlParser(addMagatamaArrayToHTML(tempMagatamaArray))\n\n    //If i want to use a function  in the html part, i have to not use the parentheses or it will auto activate  \n    //the full react code of the page\n\n\n    const MainPage = {\n        \n        color: \"#C3074F\",\n        overflow: \"hidden\",\n        backgroundImage: `url(${bg})`,\n        backgroundRepeat: \"repeat\",\n        backgroundPosition: \"center\",\n        \n    }\n\n    const Introduction = {\n        maxWidth: \"1140px\",\n        margin: \"auto\",\n        textAlign: \"center\",\n        backgroundColor: \"#131313\",\n        overflow: \"hidden\",\n        color: \"#C40000\"\n    }\n\n    const readingContent = {\n        maxWidth: \"1140px\", \n        alignItems: \"center\",\n        margin: \"auto\",\n        backgroundColor: \"#131313\",\n        overflow: \"hidden\"\n\n    }\n\n    const titleStyle = {\n        fontFamily: \"Cinzel\", \n        fontSize: \"50px\",\n        fontWeight: \"700\",\n        marginBottom: \"0px\",\n        marginTop: \"10px\"\n    }\n\n    const imageStyle = { \n        width: \"95%\",\n        height: \"auto\", \n        maxWidth: \"637px\",\n        alignItems: \"center\",\n        margin: \"auto\",\n        paddingTop: \"40px\",\n        objectFit: \"contain\"\n    }\n\n    const credits = {\n        fontFamily: \"Arial\", \n        fontSize: \"15px\",\n        margin: \"auto\",\n        textAlign: \"center\",\n        paddingTop: \"40px\",\n        color: \"#c40000\",\n        paddingBottom: \"20px\"\n    }\n\n\n\n\n    return ( \n    <div style={MainPage}>\n        <div style={Introduction}>\n            <img src={logo} style={imageStyle}/> \n            <h1 style={titleStyle}>Magatamas</h1>\n        </div>\n        <div style={readingContent}>\n            {finalMagatamas}\n            <div style={credits}>\n                <a>The information for this website was scraped from pages linked from the smt wiki  </a>\n                <a href=\" https://megamitensei.fandom.com/wiki/Magatama\">here</a>\n            </div>\n        </div> \n        \n    </div>\n);\n}\n\nexport default App;","G:\\Dev\\nocturne-magatama\\nocturne-magatama\\client\\src\\serviceWorker.js",[],"G:\\Dev\\nocturne-magatama\\nocturne-magatama\\client\\src\\Magatama.js",[],"G:\\Dev\\nocturne-magatama\\nocturne-magatama\\client\\src\\skill.js",["32"],"import \"./App.css\"\r\n\r\nconst skill1 = {\r\n    Name: \"Deathbound\",\r\n    Cost: \"25% HP\",\r\n    Effect: \"Medium physical damage to random foes.\",\r\n    Level: \"61\"\r\n}\r\n\r\nconst skill2 = {\r\n    Name: \"Avenge\",\r\n    Cost: \" Passive\",\r\n    Effect: \" 50% chance of countering any physical attack with heavy physical damage\",\r\n    Level: \"69\"\r\n}\r\n\r\nclass Skill {\r\n    constructor(name, cost, effect, level) {\r\n        this.name = name;\r\n        this.cost = cost;\r\n        this.effect = effect;\r\n        this.level = level;\r\n    }\r\n\r\n}\r\n\r\nfunction generateSkill(name, cost, effect, level) {\r\n    return new Skill(name, cost, effect, level)\r\n}\r\n\r\nfunction parseSkill(skill) {\r\n    var fixedSkill;\r\n    fixedSkill = '<tr><td>' + skill.Name + '</td><td>' + skill.Cost + '</td><td>' + skill.Effect + '</td><td>' + skill.Level + '</td></tr>';\r\n    return fixedSkill;\r\n}\r\n\r\n/*\r\n **Takes a skill and returns it as a string which represents it's html code\r\n */\r\nfunction parseSkillObject(skill) {\r\n    var fixedSkill = null\r\n    fixedSkill = '<tr><td>' + skill.name + '</td><td>' + skill.cost + '</td><td>' + skill.effect + '</td><td>' + skill.level + '</td></tr>';\r\n    return fixedSkill\r\n}\r\n\r\nfunction prepareSkillArray(skillArray) {\r\n    var i;\r\n    var parsedSkillArray = [];\r\n    for (i = 0; i < skillArray.length; i++) {\r\n        parsedSkillArray.push(parseSkill(skillArray[i]))\r\n    }\r\n    parsedSkillArray = parsedSkillArray.join(\"\");\r\n    console.log(\"parsed here\" + parsedSkillArray);\r\n    return parsedSkillArray;\r\n}\r\n\r\n/*\r\n **Takes an array of skills and returns them as an array of strings which represents their react html code\r\n */\r\nfunction parseSkillObjectArray(skillArray) {\r\n    var parsedSkillArray = [];\r\n    skillArray.forEach(element => {\r\n        parsedSkillArray.push(parseSkillObject(element))\r\n    });\r\n    parsedSkillArray = parsedSkillArray.join(\"\")\r\n    console.log(\"Maximum Parse \" + parsedSkillArray)\r\n    return parsedSkillArray\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst finalSkillArray = function() {\r\n    console.log(\"test\");\r\n\r\n}\r\nvar skillArray = [skill1, skill2];\r\nvar finalProduct = prepareSkillArray(skillArray);\r\nconsole.log(\"finalProduct \" + finalProduct)\r\n\r\n\r\nexport { finalProduct, prepareSkillArray, generateSkill, parseSkillObjectArray };",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":12,"column":10,"nodeType":"39","messageId":"40","endLine":12,"endColumn":16},{"ruleId":"41","severity":1,"message":"42","line":78,"column":8,"nodeType":"43","endLine":78,"endColumn":39,"suggestions":"44"},{"ruleId":"41","severity":1,"message":"45","line":86,"column":8,"nodeType":"43","endLine":86,"endColumn":10,"suggestions":"46"},{"ruleId":"47","severity":1,"message":"48","line":187,"column":13,"nodeType":"49","endLine":187,"endColumn":49},{"ruleId":"50","severity":1,"message":"51","line":193,"column":17,"nodeType":"49","endLine":193,"endColumn":20},{"ruleId":"37","severity":1,"message":"52","line":75,"column":7,"nodeType":"39","messageId":"40","endLine":75,"endColumn":22},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["55"],"React Hook useEffect has missing dependencies: 'data' and 'loadData'. Either include them or remove the dependency array.",["56"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'finalSkillArray' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"57","fix":"58"},{"desc":"59","fix":"60"},"Update the dependencies array to be: [data]",{"range":"61","text":"62"},"Update the dependencies array to be: [data, loadData]",{"range":"63","text":"64"},[2930,2961],"[data]",[3111,3113],"[data, loadData]"]